[{"id":"a96b05d8f0164df542d00d04ad7416bc","title":"Platform_Logging","content":"For Rancher 2.6, refers this article https://zhuanlan.zhihu.com/p/481258609\nFor Rancher 2.5 and 2.5 only, please refer below steps.\nAbstract在 SUSE Rancher 2.5 以前，日志收集的架构是使用 Fluentd 收集指定目录日志或者容器标准输出流后，再通过 UI 日志功能页面的配置发送到指定的后端。如 Elasticsearch、splunk、kafka、syslog、fluentd 等常见的后端工具，可以自动化地收集 kubernetes 集群和运行于集群之上的工作负载日志。这种方式无疑是非常简单、易用、方便的，但是随着用户对云原生理解的加深，对业务日志分析颗粒度要求的提高，之前的日志收集方式有些太过死板，灵活性非常差，已经无法满足对日志收集具有更高要求的用户了。\n于是从 SUSE Rancher 2.5 版本开始，BanzaiCloud 公司的开源产品 Logging Operator 成为了新一代 SUSE Rancher 容器云平台日志采集功能的组成组件。SUSE Rancher 2.5 版本作为新日志组件的过渡版本，保留了老版本的日志收集方式，并将全新的 Logging Operator 作为实验性功能使用；SUSE Rancher 2.6 版本则已经完全使用了 Logging Operator 作为日志收集工具\nInstallation从 Rancher Market Place 中安装Logging 模块， 里面包括了logging-operator， fluent/fluentbit 组件。 \n从Rancher Market中安装EFK（其他处理日志软件如Loki也是可以的， 取决于项目需求）。\nBasic flowFluentbit会采集container中log里的内容，发动给fluentd。 然后fluentd会根据配置把日志发给不同的目的地。\nConfigurationbanzai cloud 在自定义资源中主要给用户提供了两个重要的资源， flow 和 output。\n在Rancher 2.5中， 需要自己定义这两个资源。 clusterflow ， clusterouput与 flow, output的区别是作用域不同。\nClusterOutput 内容是fluentbit的插件定义， 这里启用了elasticsearch的插件并添加了目的地等参数。\napiVersion: logging.banzaicloud.io&#x2F;v1beta1\nkind: ClusterOutput\nmetadata:\n  name: es-clusteroutput\nspec:\n  elasticsearch:\n    host: elasticsearch-master.efk.svc.cluster.local\n    port: 9200\n    scheme: http\n    index_name: &quot;fluentd.$&#123;tag&#125;.%Y%m%d&quot;\n\nClusterflow  此为fluentd的插件描述， 这边定义了获取源的select以及output的去向。 \napiVersion: logging.banzaicloud.io&#x2F;v1beta1\nkind: ClusterFlow\nmetadata:\n  name: clusterflow\nspec:\n  match:\n  - select:\n      namespaces:\n      - mingxin-prod\n      - mingxin-test\n  filters:\n    - dedot:\n        de_dot_separator: &quot;-&quot;\n        de_dot_nested: true\n#    - stdout:\n#       output_type: json\n  globalOutputRefs:\n    - es-clusteroutput\n以上资源需要在cattle-logging-system中应用。 \nPost action由于使用老旧版本的EFK， 7.3.0需要手动做一些工作。 \n在EFK接受到之后，需要在Kibana上建立index， 并且使用api建立index template。PUT /_template/fluentd\n&#123;\n  &quot;index_patterns&quot;: [&quot;fluentd.*&quot;],\n  &quot;settings&quot;: &#123;\n    &quot;number_of_shards&quot;: 1\n  &#125;,\n  &quot;mappings&quot;: &#123;\n    &quot;_source&quot;: &#123;\n      &quot;enabled&quot;: true\n    &#125;,\n    &quot;properties&quot;: &#123;\n      &quot;host_name&quot;: &#123;\n        &quot;type&quot;: &quot;keyword&quot;\n      &#125;,\n      &quot;created_at&quot;: &#123;\n        &quot;type&quot;: &quot;date&quot;,\n        &quot;format&quot;: &quot;EEE MMM dd HH:mm:ss Z yyyy&quot;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n\n然后在Kibana上给index建立生命周期即可。\nConclusion至此这一套基于loggin-operator的日志系统搭建完成。 \n","slug":"Platform-Logging","date":"2023-04-10T07:15:40.000Z","categories_index":"Configuration","tags_index":"Config","author_index":"星尘"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-04-10T06:01:43.624Z","categories_index":"Tutorial","tags_index":"Sample","author_index":"星尘"},{"id":"bb4d5539aa818c541588349efa1c5b23","title":"RabbitMQ TLS","content":"RabbitMQ TLSCertificationRabbitMQ TLS Support\nGenerate certificates with TLS-GEN\nubuntu@data-layer-bastion-2:~&#x2F;tck&#x2F;cert&#x2F;tls-gen&#x2F;basic&#x2F;result$ ll\ntotal 44\ndrwxrwxr-x 2 ubuntu ubuntu 4096 Dec 14 06:30 .&#x2F;\ndrwxrwxr-x 7 ubuntu ubuntu 4096 Dec 10 05:39 ..&#x2F;\n-rw-rw-r-- 1 ubuntu ubuntu 1208 Dec 10 05:39 ca_certificate.pem\n-rw------- 1 ubuntu ubuntu 1854 Dec 10 05:39 ca_key.pem\n-rw-rw-r-- 1 ubuntu ubuntu 1204 Dec 10 05:39 client_certificate.pem\n-rw------- 1 ubuntu ubuntu 2453 Dec 10 05:39 client_key.p12\n-rw------- 1 ubuntu ubuntu 1874 Dec 10 05:39 client_key.pem\n-rw-rw-r-- 1 ubuntu ubuntu  979 Dec 10 05:45 rabbitstore\n-rw-rw-r-- 1 ubuntu ubuntu 1294 Dec 10 05:39 server_certificate.pem\n-rw------- 1 ubuntu ubuntu 2517 Dec 10 05:39 server_key.p12\n-rw------- 1 ubuntu ubuntu 1874 Dec 10 05:39 server_key.pem\n\nServerSwarmversion: &#39;3.2&#39;\nservices:\n  rabbitmqtls:\n    image: rabbitmq:3.9-management\n    volumes:\n      - .&#x2F;certs&#x2F;ca_certificate.pem:&#x2F;etc&#x2F;rabbitmq&#x2F;ca_certificate.pem\n      - .&#x2F;certs&#x2F;server_certificate.pem:&#x2F;etc&#x2F;rabbitmq&#x2F;server_certificate.pem\n      - .&#x2F;certs&#x2F;server_key.pem:&#x2F;etc&#x2F;rabbitmq&#x2F;server_key.pem\n      - .&#x2F;rabbitmq.conf:&#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.conf\n    ports:\n      - &quot;5672:5672&quot;\n      - &quot;15672:15672&quot;\n      - &quot;5671:5671&quot;\n    deploy:\n      placement:\n        constraints: [node.role &#x3D;&#x3D; manager]\n      restart_policy:\n        condition: on-failure\n\nrabbitmq.conf\nloopback_users.guest &#x3D; false\nlisteners.tcp.default &#x3D; 5672\ndefault_pass &#x3D; rabbitpwd\ndefault_user &#x3D; rabbitmq\nmanagement.tcp.port &#x3D; 15672\nlisteners.ssl.default &#x3D; 0.0.0.0:5671\n\nlog.file.level &#x3D; debug\n\nssl_options.password&#x3D;stardust\nssl_options.versions.1&#x3D;tlsv1.2\nssl_options.versions.2&#x3D;tlsv1.1\nssl_options.cacertfile &#x3D; &#x2F;etc&#x2F;rabbitmq&#x2F;ca_certificate.pem\nssl_options.certfile   &#x3D; &#x2F;etc&#x2F;rabbitmq&#x2F;server_certificate.pem\nssl_options.keyfile    &#x3D; &#x2F;etc&#x2F;rabbitmq&#x2F;server_key.pem\nssl_options.verify     &#x3D; verify_peer\nssl_options.fail_if_no_peer_cert &#x3D; true\n\nFor mutual verification, set ssl_options.fail_if_no_peer_cert = true . On client side , it needs to provide PKCS12 format keystore and JSK format truststore.\nHelmvalue.yaml\nmodify TLS section:\ntls:\n    enabled: true\n    autoGenerated: false\n    failIfNoPeerCert: true \n    sslOptionsVerify: verify_peer\n    caCertificate: |-\n        -----BEGIN CERTIFICATE-----\n        MIIDUDCCAjigAwIBAgIUbpNnPmvHXxBulcqi5tdYZmCwv6kwDQYJKoZIhvcNAQEL\n        BQAwMTEgMB4GA1UEAwwXVExTR2VuU2VsZlNpZ25lZHRSb290Q0ExDTALBgNVBAcM\n        BCQkJCQwHhcNMjExMjEwMDUzOTUzWhcNMzExMjA4MDUzOTUzWjAxMSAwHgYDVQQD\n        DBdUTFNHZW5TZWxmU2lnbmVkdFJvb3RDQTENMAsGA1UEBwwEJCQkJDCCASIwDQYJ\n        KoZIhvcNAQEBBQADggEPADCCAQoCggEBALBAyCgZXJCMZPpKu8XEFyqrleex2Tc0\n        M1KayRT&#x2F;JQDMe5UU7csmJ4BVBiTm7x&#x2F;+xGfUdOsa+GXpqlRhYFy&#x2F;a++iD+&#x2F;5Iv8a\n        6UrXWb3Ost2w1+7k02lIF5iLOJCjriy8D0As3BixC1twWRyaos5vAiv84owzSaCt\n        LrgKQkNVAd9TqCG0GWq0JAx2yI+8auxdqT9JMqElYALUpYJHtsD2d7AY4iCXayk3\n        1xsCYi5+RXTLjBAtb11aPFYxDHEUIc01OPW+7sMUWgVDWZC+39LN+AItuuBnXI9B\n        SilVessAhLNvJBr5OIR4L6mTRRvmwz+unNYjcAIpu6E5fz3ouW4X6oMCAwEAAaNg\n        MF4wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBSLId7LglANzKItcLLkcF6OWI&#x2F;XSTAf\n        BgNVHSMEGDAWgBSLId7LglANzKItcLLkcF6OWI&#x2F;XSTAPBgNVHRMBAf8EBTADAQH&#x2F;\n        MA0GCSqGSIb3DQEBCwUAA4IBAQALy6BOdzwZtyy5w9ExVHeyYi0p1IGOO7j5RkbK\n        pWwGzHMbI5a8lmlEk8Vo77u7iK6ppfzUOiYK9IqKqMjvhgRe7wUkvcT9rfHk9acc\n        OPwYTOqGr2EoPvVESVU7q+BvVlLZE24dlEhji9c3BeNnqybAU&#x2F;M4lMovBYbbUXZo\n        3MtF9V4YGpgNsOHwlrG3QDYGHoMpLUR8WJ9uF2DQ2bRBmVXi8eeTiIIL6B1Xn5QT\n        0amNKLKjlmebEEG9UzmZP6wekJdSZZ6XMWdCMup04tgDJCVXHZe5d6V0chvYwtcW\n        R1VlTl6mD8yB9RZMVWONejzOdGDHW7dDchq4JZ7xfZ&#x2F;jGiyL\n        -----END CERTIFICATE-----\n    serverCertificate: |- \n        -----BEGIN CERTIFICATE-----\n        MIIDjzCCAnegAwIBAgIBATANBgkqhkiG9w0BAQsFADAxMSAwHgYDVQQDDBdUTFNH\n        ZW5TZWxmU2lnbmVkdFJvb3RDQTENMAsGA1UEBwwEJCQkJDAeFw0yMTEyMTAwNTM5\n        NTNaFw0zMTEyMDgwNTM5NTNaMDAxHTAbBgNVBAMMFGRhdGEtbGF5ZXItYmFzdGlv\n        bi0yMQ8wDQYDVQQKDAZzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\n        AoIBAQD2WmtH&#x2F;In7A6zY1aa+wGRmVFh2aHl4dqSfF2qwzNTpaopdzCY1&#x2F;0VJ7sj7\n        3R2SAMuOkVkf9+KG8PLiiui80xL9dd0HPH8X3LZApSMilZhkJKF4MgxgzOHvk7IR\n        5LXjwO5EyPxgt2dDwh7Q3YgT0DrYmIQe7+cfqCwcbyYhBQ2v9VYN2AErsqY3L4DG\n        mdmfYgoH00E3WzyZr6SjqlvCyFZcaD1mOjfCybNepn99rVKCVQx15soEJGwEEbS9\n        Zx5IezEXERIj5Mi03Xxa2SAx+DNNU2kDm82GWEEElVUFzUE1ultPjIB4TgX+sRg+\n        tsbBIpJFo8kcWT5n5vvnbq7CvcmrAgMBAAGjgbIwga8wCQYDVR0TBAIwADALBgNV\n        HQ8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwQAYDVR0RBDkwN4IUZGF0YS1s\n        YXllci1iYXN0aW9uLTKCFGRhdGEtbGF5ZXItYmFzdGlvbi0ygglsb2NhbGhvc3Qw\n        HQYDVR0OBBYEFLhNTZUuZr4bjM4nS1ELSa45CAHfMB8GA1UdIwQYMBaAFIsh3suC\n        UA3Moi1wsuRwXo5Yj9dJMA0GCSqGSIb3DQEBCwUAA4IBAQAYMymnd0pspaxs&#x2F;MBm\n        peeaWyfwEkJ0ZHY1QqPvVykqpv06FOMzORjf5AU0hgPHz+ylr4DlU&#x2F;XaNtKQaoCg\n        pW5b7vC1Sop9AnCgz5s6lPQHLPfsOGhtsL88cOKAL+9Lm+1C8+Mji&#x2F;&#x2F;mRfnfT0MG\n        CuCDVNqe3s0zEL&#x2F;pQTXhNWI7QoaSKMdMY4Cn2HyadFUvAoao7onHiNLeWiTczrvT\n        hWZX2S7VHYkKnf3Mfqxx5hyyGgq0xSJw9g+b14z0DL0N185vN+gTi3CtSttP1lMQ\n        egTmwyNiNsj31Pbrf8iAjh4TmDgp52VpCM2NjsunsDl+2FSA7kS+XVyhKQv0NfA7\n        esXO\n        -----END CERTIFICATE-----\n    serverKey: |-\n        -----BEGIN ENCRYPTED PRIVATE KEY-----\n        MIIFLTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQIcS&#x2F;9gTdrKwcCAggA\n        MAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBDHuvo+p0odNH8BHKG1nIxhBIIE\n        0HyFKnr228yw+LlZIGnv+nfNFawisFpphPPTjrXvta4JN7sa86YS39I0ZPATmAoa\n        ksDX9RgNGFjZ0UXBUeF09T8F&#x2F;BEpi42bdcBnAHPMJxjxC4jbnYcEVmpnT&#x2F;UkdaLo\n        bU311YDJsakKbApteZ+XiYeu6jwZuknKLAqF4iobx3xKsUTGx2vKo1oM88y39xD5\n        Ry8lg+ObXpDbqdqlE+fyM1a1AW6TK7IwwytbhNCmtzTIng&#x2F;356KocEqvjvmYGSOR\n        NJ567ULoyusyXfztvTDOL+moEoXm8&#x2F;NdGZGUR83oReME71fiT2ARiwhet+f0lEd9\n        SRHwMOQFMq&#x2F;M+b&#x2F;&#x2F;GHMUPYcm4FZigbsOOYd9cupKkf597SAECVv4i5fEc5nIBPHr\n        rnF3QUdfYueaPBB2bVNNA5GVQsPzfj0gcWxAd&#x2F;&#x2F;oMIb6yhbnXW5yvy14omSVuMxN\n        rT&#x2F;fOySNAtMQq6A7Cq7JCnohFv6yjIqrIg&#x2F;pDbNgyN0F+mv2QKKclEiIK4XfRojv\n        bqofTa4CVwSQRC0thKpA8gNYzqNGwm72NAjwjKZlVIl2qn4xibiikUGSSwKy&#x2F;XKU\n        dQoIo3NeUxN9Mz0iwUSqkVdOdUeHUjZL7Zwd1wfx06SVQbtcG6ursg9ejkMZWvXb\n        A0uTOft1Tt&#x2F;40xKuoH&#x2F;AWZ02kTClrEJtSbHSLVjabHMLFz2SCUmp3&#x2F;aDcVqWCtd7\n        8aeMLCEAj5TpWXukEwmOjsIjzIyhnP6FbfxXtHJlBQZJvR4V1Mo1zMBYSX8qsbXN\n        SAHLFC1GHsLnFuuqKIKOxx4HbPTBSiCbet24j0YNjCTXLX76QeX5qfZjjjh+6QPE\n        FW&#x2F;oXICmCQ1uJEvsWbrspOJKccQn+quctdf4IRax8xnLpVrrezVfmdJyx7QC0glO\n        mhq67t+RTEPNAASIIB&#x2F;7xNeS913WYwP4leaYDadBEBNZp49GU27t&#x2F;+ZpmdB&#x2F;9ZTu\n        DYZqgj8t58a&#x2F;Noas4A6HC+rRLbcPBTzuj3yKydswYjgRcxGhOWSDMIK0iTod4HOh\n        o&#x2F;n&#x2F;HVtTHxfmkyvm2LrkxTOJRfTPyQuhaP&#x2F;2NUxbw9O6Lu10fqrgzSo6kVJlm+dz\n        Zle2VIvVuy2nefT+qZBCYFw1s2pOD0g5t+1KwTIN+rEx+epvLGxULYJ3yOj3Vvv7\n        8NNdokPevz7k9my8MrtGbdDOlU&#x2F;iNjeWfIUPSRiT5IGIY3vaxrpEua&#x2F;DkMY0u&#x2F;IC\n        HLqitms5734E7V3AAAif5UcoUrS4wG0xpXr&#x2F;MO1iw0n&#x2F;GQeQOBYktGrONShcgjxn\n        9wKPXAqRjhme4aPb3x74hv4Dz8tT73apj48h94RrUETCzQc7zN7Voy5pnAmdVnEE\n        7pTv62EnPsG1yqGhexgDcrwC0Ob2upLlYIaLIHBIoVDVdu9nqmemzCyuY0PxMESd\n        oULKr0lr0K7P1ni5D1+HDR&#x2F;k4j5pxq5X+7g6Y9nhWbGEojoVedIUixLYDcVXZRaq\n        4YqGgwESfAoo3E5sMon9j9KmlSGNv48xk55grYqLIB7aRUdpqjj8CAZDawEq0vkp\n        k6iO&#x2F;11iv1tvT9jwYZTiKW9v9ZT3uxvfPR&#x2F;IrtI7VngjEzQ3uq66bUpYnRh&#x2F;sJ2x\n        5DZZSEunSAo55aRdesDtiUjOeXO23+71Zx4QmSPVn60c\n        -----END ENCRYPTED PRIVATE KEY-----\n    existingSecret: &quot;&quot;\n    existingSecretFullChain: false\n\nconfiguration\nconfiguration: |-\n  &#123;&#123;- if not .Values.loadDefinition.enabled -&#125;&#125;\n  ## Username and password\n  ##\n  default_user &#x3D; &#123;&#123; .Values.auth.username &#125;&#125;\n  default_pass &#x3D; guest\n  &#123;&#123;- end &#125;&#125;\n  \n  &#123;&#123;- if .Values.clustering.enabled &#125;&#125;\n  ## Clustering\n  ##\n  cluster_formation.peer_discovery_backend  &#x3D; rabbit_peer_discovery_k8s\n  cluster_formation.k8s.host &#x3D; kubernetes.default.svc.&#123;&#123; .Values.clusterDomain &#125;&#125;\n  cluster_formation.node_cleanup.interval &#x3D; 10\n  cluster_formation.node_cleanup.only_log_warning &#x3D; true\n  cluster_partition_handling &#x3D; &#123;&#123; .Values.clustering.partitionHandling &#125;&#125;\n  &#123;&#123;- end &#125;&#125;\n  # queue master locator\n  queue_master_locator &#x3D; min-masters\n  # enable guest user\n  loopback_users.guest &#x3D; none\n  &#123;&#123; tpl .Values.extraConfiguration . &#125;&#125;\n  &#123;&#123;- if .Values.auth.tls.enabled &#125;&#125;\n  # ??????\n  ssl_options.versions.1&#x3D;tlsv1.2\n  ssl_options.versions.2&#x3D;tlsv1.1\n  \n  ssl_options.verify &#x3D; &#123;&#123; .Values.auth.tls.sslOptionsVerify &#125;&#125;\n  listeners.ssl.default &#x3D; &#123;&#123; .Values.service.tlsPort &#125;&#125;\n  ssl_options.password &#x3D; stardust\n  ssl_options.fail_if_no_peer_cert &#x3D; &#123;&#123; .Values.auth.tls.failIfNoPeerCert &#125;&#125;\n  ssl_options.cacertfile &#x3D; opt&#x2F;bitnami&#x2F;rabbitmq&#x2F;certs&#x2F;ca_certificate.pem\n  ssl_options.certfile &#x3D; opt&#x2F;bitnami&#x2F;rabbitmq&#x2F;certs&#x2F;server_certificate.pem\n  ssl_options.keyfile &#x3D; opt&#x2F;bitnami&#x2F;rabbitmq&#x2F;certs&#x2F;server_key.pem\n  \n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- if .Values.ldap.enabled &#125;&#125;\n  auth_backends.1 &#x3D; rabbit_auth_backend_ldap\n  auth_backends.2 &#x3D; internal\n  &#123;&#123;- range $index, $server :&#x3D; .Values.ldap.servers &#125;&#125;\n  auth_ldap.servers.&#123;&#123; add $index 1 &#125;&#125; &#x3D; &#123;&#123; $server &#125;&#125;\n  &#123;&#123;- end &#125;&#125;\n  auth_ldap.port &#x3D; &#123;&#123; .Values.ldap.port &#125;&#125;\n  auth_ldap.user_dn_pattern &#x3D; &#123;&#123; .Values.ldap.user_dn_pattern  &#125;&#125;\n  &#123;&#123;- if .Values.ldap.tls.enabled &#125;&#125;\n  auth_ldap.use_ssl &#x3D; true\n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- if .Values.metrics.enabled &#125;&#125;\n  ## Prometheus metrics\n  ##\n  prometheus.tcp.port &#x3D; 9419\n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- if .Values.memoryHighWatermark.enabled &#125;&#125;\n  ## Memory Threshold\n  ##\n  total_memory_available_override_value &#x3D; &#123;&#123; include &quot;rabbitmq.toBytes&quot; .Values.resources.limits.memory &#125;&#125;\n  vm_memory_high_watermark.&#123;&#123; .Values.memoryHighWatermark.type &#125;&#125; &#x3D; &#123;&#123; .Values.memoryHighWatermark.value &#125;&#125;\n  &#123;&#123;- end &#125;&#125;\n\nTSL Proxy Termination  - Nginxswarm config \nversion: &#39;3.2&#39;\nservices:\n  nginx:\n    image: nginx:latest\n    ports:\n      - &quot;80:80&quot;\n      - &quot;25671:25671&quot;\n    volumes:\n      - .&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf\n      - .&#x2F;server_certificate.crt:&#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.crt\n      - .&#x2F;key.key:&#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.key\n    deploy:\n      placement:\n        constraints: [node.role &#x3D;&#x3D; manager]\n      restart_policy:\n        condition: on-failure\n\nRenaming server_certificate.pem server_key.pem to server_certificate.crt  server_key.key.\nRemove keypassphrase from server_key.key to key.key:\nopenssl rsa -in server_key.key -out key.key\n\nadd following to nginx.conf\n...\nstream &#123;\n    server &#123;\n        listen     25671 ssl;\n        proxy_pass 10.192.27.111:5672;\n        ssl_certificate        &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.crt;\n        ssl_certificate_key    &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.key;\n    &#125;\n&#125;\n\nJava ClientDirection Connectionpublic class RabbitClientTLS &#123;\n\n    public static void main(String[] args) throws Exception &#123;\n        char[] keyPassphrase &#x3D; &quot;stardust&quot;.toCharArray();\n        KeyStore ks &#x3D; KeyStore.getInstance(&quot;PKCS12&quot;);\n        ks.load(new FileInputStream(&quot;D:\\\\2021\\\\Dec\\\\certs\\\\result\\\\client_key.p12&quot;), keyPassphrase);\n\n        KeyManagerFactory kmf &#x3D; KeyManagerFactory.getInstance(&quot;SunX509&quot;);\n        kmf.init(ks, keyPassphrase);\n\n\n        char[] trustPassphrase &#x3D; &quot;stardust&quot;.toCharArray();\n        KeyStore tks &#x3D; KeyStore.getInstance(&quot;JKS&quot;);\n        tks.load(new FileInputStream(&quot;D:\\\\2021\\\\Dec\\\\certs\\\\result\\\\rabbitstore&quot;), trustPassphrase);\n\n        TrustManagerFactory tmf &#x3D; TrustManagerFactory.getInstance(&quot;SunX509&quot;);\n        tmf.init(tks);\n\n        SSLContext c &#x3D; SSLContext.getInstance(&quot;TLSv1.2&quot;);\n        c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n        ConnectionFactory factory &#x3D; new ConnectionFactory();\n        factory.setUsername(&quot;rabbitmq&quot;);\n        factory.setPassword(&quot;rabbitpwd&quot;);\n\n        factory.setHost(&quot;10.192.27.111&quot;);\n        factory.setPort(25671);\n&#x2F;&#x2F;        factory.useSslProtocol();\n        factory.useSslProtocol(c);\n&#x2F;&#x2F;        factory.enableHostnameVerification();\n        Connection conn &#x3D; factory.newConnection();\n        Channel channel &#x3D; conn.createChannel();\n\n        channel.queueDeclare(&quot;rabbitmq-java-test&quot;, false, true, true, null);\n        channel.basicPublish(&quot;&quot;, &quot;rabbitmq-java-test&quot;, null, &quot;Hello, World&quot;.getBytes());\n\n        GetResponse chResponse &#x3D; channel.basicGet(&quot;rabbitmq-java-test&quot;, false);\n        if (chResponse &#x3D;&#x3D; null) &#123;\n            System.out.println(&quot;No message retrieved&quot;);\n        &#125; else &#123;\n            byte[] body &#x3D; chResponse.getBody();\n            System.out.println(&quot;Received: &quot; + new String(body));\n        &#125;\n        channel.close();\n        conn.close();\n    &#125;\n&#125;\n\n\n\nUsing spring-boot-starter-amqpadd following configurations :\nspring:\n  application:\n    name: $&#123;APP_NAME:unnamed&#125;\n  # RabbitMQ??:\n  rabbitmq:\n    host: 10.192.27.111\n    port: 5671\n    username: rabbitmq\n    password: rabbitpwd\n#    publisher-confirms: true\n    ssl:\n      enabled: true\n      key-store: classpath:client_key.p12\n      key-store-password: stardust\n      trust-store: classpath:rabbitstore\n      trust-store-password: stardust\n      algorithm: TLSv1.2\n      key-store-type: PKCS12\n      trust-store-type: JKS\n      validate-server-certificate: true\n      verify-hostname: false\n\nFor mutual verification, on client side , it needs to provide PKCS12 format keystore and JSK format truststore and set validate-server-certificate to true.\nFor singel side verification , set validate-server-certificate to false and provide trust-store only. \n","slug":"RabbitMQ-TLS","date":"2022-01-24T09:52:40.000Z","categories_index":"Configuration","tags_index":"Config,TSL,Rabbitmq","author_index":"星尘"}]