{"title":"RabbitMQ TLS","uid":"bb4d5539aa818c541588349efa1c5b23","slug":"RabbitMQ-TLS","date":"2022-01-24T09:52:40.000Z","updated":"2023-04-10T06:01:43.624Z","comments":true,"path":"api/articles/RabbitMQ-TLS.json","keywords":null,"cover":"https://images.unsplash.com/photo-1642901797689-0201e23dbc1f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1974&q=80","content":"<h2 id=\"RabbitMQ-TLS\"><a href=\"#RabbitMQ-TLS\" class=\"headerlink\" title=\"RabbitMQ TLS\"></a>RabbitMQ TLS</h2><h3 id=\"Certification\"><a href=\"#Certification\" class=\"headerlink\" title=\"Certification\"></a>Certification</h3><p><a href=\"https://www.rabbitmq.com/ssl.html#automated-certificate-generation\">RabbitMQ TLS Support</a></p>\n<p>Generate certificates with <a href=\"https://github.com/michaelklishin/tls-gen\">TLS-GEN</a></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ubuntu@data-layer-bastion-2:~&#x2F;tck&#x2F;cert&#x2F;tls-gen&#x2F;basic&#x2F;result$ ll\ntotal 44\ndrwxrwxr-x 2 ubuntu ubuntu 4096 Dec 14 06:30 .&#x2F;\ndrwxrwxr-x 7 ubuntu ubuntu 4096 Dec 10 05:39 ..&#x2F;\n-rw-rw-r-- 1 ubuntu ubuntu 1208 Dec 10 05:39 ca_certificate.pem\n-rw------- 1 ubuntu ubuntu 1854 Dec 10 05:39 ca_key.pem\n-rw-rw-r-- 1 ubuntu ubuntu 1204 Dec 10 05:39 client_certificate.pem\n-rw------- 1 ubuntu ubuntu 2453 Dec 10 05:39 client_key.p12\n-rw------- 1 ubuntu ubuntu 1874 Dec 10 05:39 client_key.pem\n-rw-rw-r-- 1 ubuntu ubuntu  979 Dec 10 05:45 rabbitstore\n-rw-rw-r-- 1 ubuntu ubuntu 1294 Dec 10 05:39 server_certificate.pem\n-rw------- 1 ubuntu ubuntu 2517 Dec 10 05:39 server_key.p12\n-rw------- 1 ubuntu ubuntu 1874 Dec 10 05:39 server_key.pem</code></pre>\n\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><h4 id=\"Swarm\"><a href=\"#Swarm\" class=\"headerlink\" title=\"Swarm\"></a>Swarm</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">version: &#39;3.2&#39;\nservices:\n  rabbitmqtls:\n    image: rabbitmq:3.9-management\n    volumes:\n      - .&#x2F;certs&#x2F;ca_certificate.pem:&#x2F;etc&#x2F;rabbitmq&#x2F;ca_certificate.pem\n      - .&#x2F;certs&#x2F;server_certificate.pem:&#x2F;etc&#x2F;rabbitmq&#x2F;server_certificate.pem\n      - .&#x2F;certs&#x2F;server_key.pem:&#x2F;etc&#x2F;rabbitmq&#x2F;server_key.pem\n      - .&#x2F;rabbitmq.conf:&#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.conf\n    ports:\n      - &quot;5672:5672&quot;\n      - &quot;15672:15672&quot;\n      - &quot;5671:5671&quot;\n    deploy:\n      placement:\n        constraints: [node.role &#x3D;&#x3D; manager]\n      restart_policy:\n        condition: on-failure</code></pre>\n\n<p>rabbitmq.conf</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">loopback_users.guest &#x3D; false\nlisteners.tcp.default &#x3D; 5672\ndefault_pass &#x3D; rabbitpwd\ndefault_user &#x3D; rabbitmq\nmanagement.tcp.port &#x3D; 15672\nlisteners.ssl.default &#x3D; 0.0.0.0:5671\n\nlog.file.level &#x3D; debug\n\nssl_options.password&#x3D;stardust\nssl_options.versions.1&#x3D;tlsv1.2\nssl_options.versions.2&#x3D;tlsv1.1\nssl_options.cacertfile &#x3D; &#x2F;etc&#x2F;rabbitmq&#x2F;ca_certificate.pem\nssl_options.certfile   &#x3D; &#x2F;etc&#x2F;rabbitmq&#x2F;server_certificate.pem\nssl_options.keyfile    &#x3D; &#x2F;etc&#x2F;rabbitmq&#x2F;server_key.pem\nssl_options.verify     &#x3D; verify_peer\nssl_options.fail_if_no_peer_cert &#x3D; true</code></pre>\n\n<p>For mutual verification, set ssl_options.fail_if_no_peer_cert = true . On client side , it needs to provide PKCS12 format keystore and JSK format truststore.</p>\n<h4 id=\"Helm\"><a href=\"#Helm\" class=\"headerlink\" title=\"Helm\"></a>Helm</h4><p>value.yaml</p>\n<p>modify TLS section:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">tls:\n    enabled: true\n    autoGenerated: false\n    failIfNoPeerCert: true \n    sslOptionsVerify: verify_peer\n    caCertificate: |-\n        -----BEGIN CERTIFICATE-----\n        MIIDUDCCAjigAwIBAgIUbpNnPmvHXxBulcqi5tdYZmCwv6kwDQYJKoZIhvcNAQEL\n        BQAwMTEgMB4GA1UEAwwXVExTR2VuU2VsZlNpZ25lZHRSb290Q0ExDTALBgNVBAcM\n        BCQkJCQwHhcNMjExMjEwMDUzOTUzWhcNMzExMjA4MDUzOTUzWjAxMSAwHgYDVQQD\n        DBdUTFNHZW5TZWxmU2lnbmVkdFJvb3RDQTENMAsGA1UEBwwEJCQkJDCCASIwDQYJ\n        KoZIhvcNAQEBBQADggEPADCCAQoCggEBALBAyCgZXJCMZPpKu8XEFyqrleex2Tc0\n        M1KayRT&#x2F;JQDMe5UU7csmJ4BVBiTm7x&#x2F;+xGfUdOsa+GXpqlRhYFy&#x2F;a++iD+&#x2F;5Iv8a\n        6UrXWb3Ost2w1+7k02lIF5iLOJCjriy8D0As3BixC1twWRyaos5vAiv84owzSaCt\n        LrgKQkNVAd9TqCG0GWq0JAx2yI+8auxdqT9JMqElYALUpYJHtsD2d7AY4iCXayk3\n        1xsCYi5+RXTLjBAtb11aPFYxDHEUIc01OPW+7sMUWgVDWZC+39LN+AItuuBnXI9B\n        SilVessAhLNvJBr5OIR4L6mTRRvmwz+unNYjcAIpu6E5fz3ouW4X6oMCAwEAAaNg\n        MF4wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBSLId7LglANzKItcLLkcF6OWI&#x2F;XSTAf\n        BgNVHSMEGDAWgBSLId7LglANzKItcLLkcF6OWI&#x2F;XSTAPBgNVHRMBAf8EBTADAQH&#x2F;\n        MA0GCSqGSIb3DQEBCwUAA4IBAQALy6BOdzwZtyy5w9ExVHeyYi0p1IGOO7j5RkbK\n        pWwGzHMbI5a8lmlEk8Vo77u7iK6ppfzUOiYK9IqKqMjvhgRe7wUkvcT9rfHk9acc\n        OPwYTOqGr2EoPvVESVU7q+BvVlLZE24dlEhji9c3BeNnqybAU&#x2F;M4lMovBYbbUXZo\n        3MtF9V4YGpgNsOHwlrG3QDYGHoMpLUR8WJ9uF2DQ2bRBmVXi8eeTiIIL6B1Xn5QT\n        0amNKLKjlmebEEG9UzmZP6wekJdSZZ6XMWdCMup04tgDJCVXHZe5d6V0chvYwtcW\n        R1VlTl6mD8yB9RZMVWONejzOdGDHW7dDchq4JZ7xfZ&#x2F;jGiyL\n        -----END CERTIFICATE-----\n    serverCertificate: |- \n        -----BEGIN CERTIFICATE-----\n        MIIDjzCCAnegAwIBAgIBATANBgkqhkiG9w0BAQsFADAxMSAwHgYDVQQDDBdUTFNH\n        ZW5TZWxmU2lnbmVkdFJvb3RDQTENMAsGA1UEBwwEJCQkJDAeFw0yMTEyMTAwNTM5\n        NTNaFw0zMTEyMDgwNTM5NTNaMDAxHTAbBgNVBAMMFGRhdGEtbGF5ZXItYmFzdGlv\n        bi0yMQ8wDQYDVQQKDAZzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\n        AoIBAQD2WmtH&#x2F;In7A6zY1aa+wGRmVFh2aHl4dqSfF2qwzNTpaopdzCY1&#x2F;0VJ7sj7\n        3R2SAMuOkVkf9+KG8PLiiui80xL9dd0HPH8X3LZApSMilZhkJKF4MgxgzOHvk7IR\n        5LXjwO5EyPxgt2dDwh7Q3YgT0DrYmIQe7+cfqCwcbyYhBQ2v9VYN2AErsqY3L4DG\n        mdmfYgoH00E3WzyZr6SjqlvCyFZcaD1mOjfCybNepn99rVKCVQx15soEJGwEEbS9\n        Zx5IezEXERIj5Mi03Xxa2SAx+DNNU2kDm82GWEEElVUFzUE1ultPjIB4TgX+sRg+\n        tsbBIpJFo8kcWT5n5vvnbq7CvcmrAgMBAAGjgbIwga8wCQYDVR0TBAIwADALBgNV\n        HQ8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwQAYDVR0RBDkwN4IUZGF0YS1s\n        YXllci1iYXN0aW9uLTKCFGRhdGEtbGF5ZXItYmFzdGlvbi0ygglsb2NhbGhvc3Qw\n        HQYDVR0OBBYEFLhNTZUuZr4bjM4nS1ELSa45CAHfMB8GA1UdIwQYMBaAFIsh3suC\n        UA3Moi1wsuRwXo5Yj9dJMA0GCSqGSIb3DQEBCwUAA4IBAQAYMymnd0pspaxs&#x2F;MBm\n        peeaWyfwEkJ0ZHY1QqPvVykqpv06FOMzORjf5AU0hgPHz+ylr4DlU&#x2F;XaNtKQaoCg\n        pW5b7vC1Sop9AnCgz5s6lPQHLPfsOGhtsL88cOKAL+9Lm+1C8+Mji&#x2F;&#x2F;mRfnfT0MG\n        CuCDVNqe3s0zEL&#x2F;pQTXhNWI7QoaSKMdMY4Cn2HyadFUvAoao7onHiNLeWiTczrvT\n        hWZX2S7VHYkKnf3Mfqxx5hyyGgq0xSJw9g+b14z0DL0N185vN+gTi3CtSttP1lMQ\n        egTmwyNiNsj31Pbrf8iAjh4TmDgp52VpCM2NjsunsDl+2FSA7kS+XVyhKQv0NfA7\n        esXO\n        -----END CERTIFICATE-----\n    serverKey: |-\n        -----BEGIN ENCRYPTED PRIVATE KEY-----\n        MIIFLTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQIcS&#x2F;9gTdrKwcCAggA\n        MAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBDHuvo+p0odNH8BHKG1nIxhBIIE\n        0HyFKnr228yw+LlZIGnv+nfNFawisFpphPPTjrXvta4JN7sa86YS39I0ZPATmAoa\n        ksDX9RgNGFjZ0UXBUeF09T8F&#x2F;BEpi42bdcBnAHPMJxjxC4jbnYcEVmpnT&#x2F;UkdaLo\n        bU311YDJsakKbApteZ+XiYeu6jwZuknKLAqF4iobx3xKsUTGx2vKo1oM88y39xD5\n        Ry8lg+ObXpDbqdqlE+fyM1a1AW6TK7IwwytbhNCmtzTIng&#x2F;356KocEqvjvmYGSOR\n        NJ567ULoyusyXfztvTDOL+moEoXm8&#x2F;NdGZGUR83oReME71fiT2ARiwhet+f0lEd9\n        SRHwMOQFMq&#x2F;M+b&#x2F;&#x2F;GHMUPYcm4FZigbsOOYd9cupKkf597SAECVv4i5fEc5nIBPHr\n        rnF3QUdfYueaPBB2bVNNA5GVQsPzfj0gcWxAd&#x2F;&#x2F;oMIb6yhbnXW5yvy14omSVuMxN\n        rT&#x2F;fOySNAtMQq6A7Cq7JCnohFv6yjIqrIg&#x2F;pDbNgyN0F+mv2QKKclEiIK4XfRojv\n        bqofTa4CVwSQRC0thKpA8gNYzqNGwm72NAjwjKZlVIl2qn4xibiikUGSSwKy&#x2F;XKU\n        dQoIo3NeUxN9Mz0iwUSqkVdOdUeHUjZL7Zwd1wfx06SVQbtcG6ursg9ejkMZWvXb\n        A0uTOft1Tt&#x2F;40xKuoH&#x2F;AWZ02kTClrEJtSbHSLVjabHMLFz2SCUmp3&#x2F;aDcVqWCtd7\n        8aeMLCEAj5TpWXukEwmOjsIjzIyhnP6FbfxXtHJlBQZJvR4V1Mo1zMBYSX8qsbXN\n        SAHLFC1GHsLnFuuqKIKOxx4HbPTBSiCbet24j0YNjCTXLX76QeX5qfZjjjh+6QPE\n        FW&#x2F;oXICmCQ1uJEvsWbrspOJKccQn+quctdf4IRax8xnLpVrrezVfmdJyx7QC0glO\n        mhq67t+RTEPNAASIIB&#x2F;7xNeS913WYwP4leaYDadBEBNZp49GU27t&#x2F;+ZpmdB&#x2F;9ZTu\n        DYZqgj8t58a&#x2F;Noas4A6HC+rRLbcPBTzuj3yKydswYjgRcxGhOWSDMIK0iTod4HOh\n        o&#x2F;n&#x2F;HVtTHxfmkyvm2LrkxTOJRfTPyQuhaP&#x2F;2NUxbw9O6Lu10fqrgzSo6kVJlm+dz\n        Zle2VIvVuy2nefT+qZBCYFw1s2pOD0g5t+1KwTIN+rEx+epvLGxULYJ3yOj3Vvv7\n        8NNdokPevz7k9my8MrtGbdDOlU&#x2F;iNjeWfIUPSRiT5IGIY3vaxrpEua&#x2F;DkMY0u&#x2F;IC\n        HLqitms5734E7V3AAAif5UcoUrS4wG0xpXr&#x2F;MO1iw0n&#x2F;GQeQOBYktGrONShcgjxn\n        9wKPXAqRjhme4aPb3x74hv4Dz8tT73apj48h94RrUETCzQc7zN7Voy5pnAmdVnEE\n        7pTv62EnPsG1yqGhexgDcrwC0Ob2upLlYIaLIHBIoVDVdu9nqmemzCyuY0PxMESd\n        oULKr0lr0K7P1ni5D1+HDR&#x2F;k4j5pxq5X+7g6Y9nhWbGEojoVedIUixLYDcVXZRaq\n        4YqGgwESfAoo3E5sMon9j9KmlSGNv48xk55grYqLIB7aRUdpqjj8CAZDawEq0vkp\n        k6iO&#x2F;11iv1tvT9jwYZTiKW9v9ZT3uxvfPR&#x2F;IrtI7VngjEzQ3uq66bUpYnRh&#x2F;sJ2x\n        5DZZSEunSAo55aRdesDtiUjOeXO23+71Zx4QmSPVn60c\n        -----END ENCRYPTED PRIVATE KEY-----\n    existingSecret: &quot;&quot;\n    existingSecretFullChain: false</code></pre>\n\n<p>configuration</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">configuration: |-\n  &#123;&#123;- if not .Values.loadDefinition.enabled -&#125;&#125;\n  ## Username and password\n  ##\n  default_user &#x3D; &#123;&#123; .Values.auth.username &#125;&#125;\n  default_pass &#x3D; guest\n  &#123;&#123;- end &#125;&#125;\n  \n  &#123;&#123;- if .Values.clustering.enabled &#125;&#125;\n  ## Clustering\n  ##\n  cluster_formation.peer_discovery_backend  &#x3D; rabbit_peer_discovery_k8s\n  cluster_formation.k8s.host &#x3D; kubernetes.default.svc.&#123;&#123; .Values.clusterDomain &#125;&#125;\n  cluster_formation.node_cleanup.interval &#x3D; 10\n  cluster_formation.node_cleanup.only_log_warning &#x3D; true\n  cluster_partition_handling &#x3D; &#123;&#123; .Values.clustering.partitionHandling &#125;&#125;\n  &#123;&#123;- end &#125;&#125;\n  # queue master locator\n  queue_master_locator &#x3D; min-masters\n  # enable guest user\n  loopback_users.guest &#x3D; none\n  &#123;&#123; tpl .Values.extraConfiguration . &#125;&#125;\n  &#123;&#123;- if .Values.auth.tls.enabled &#125;&#125;\n  # ??????\n  ssl_options.versions.1&#x3D;tlsv1.2\n  ssl_options.versions.2&#x3D;tlsv1.1\n  \n  ssl_options.verify &#x3D; &#123;&#123; .Values.auth.tls.sslOptionsVerify &#125;&#125;\n  listeners.ssl.default &#x3D; &#123;&#123; .Values.service.tlsPort &#125;&#125;\n  ssl_options.password &#x3D; stardust\n  ssl_options.fail_if_no_peer_cert &#x3D; &#123;&#123; .Values.auth.tls.failIfNoPeerCert &#125;&#125;\n  ssl_options.cacertfile &#x3D; opt&#x2F;bitnami&#x2F;rabbitmq&#x2F;certs&#x2F;ca_certificate.pem\n  ssl_options.certfile &#x3D; opt&#x2F;bitnami&#x2F;rabbitmq&#x2F;certs&#x2F;server_certificate.pem\n  ssl_options.keyfile &#x3D; opt&#x2F;bitnami&#x2F;rabbitmq&#x2F;certs&#x2F;server_key.pem\n  \n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- if .Values.ldap.enabled &#125;&#125;\n  auth_backends.1 &#x3D; rabbit_auth_backend_ldap\n  auth_backends.2 &#x3D; internal\n  &#123;&#123;- range $index, $server :&#x3D; .Values.ldap.servers &#125;&#125;\n  auth_ldap.servers.&#123;&#123; add $index 1 &#125;&#125; &#x3D; &#123;&#123; $server &#125;&#125;\n  &#123;&#123;- end &#125;&#125;\n  auth_ldap.port &#x3D; &#123;&#123; .Values.ldap.port &#125;&#125;\n  auth_ldap.user_dn_pattern &#x3D; &#123;&#123; .Values.ldap.user_dn_pattern  &#125;&#125;\n  &#123;&#123;- if .Values.ldap.tls.enabled &#125;&#125;\n  auth_ldap.use_ssl &#x3D; true\n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- if .Values.metrics.enabled &#125;&#125;\n  ## Prometheus metrics\n  ##\n  prometheus.tcp.port &#x3D; 9419\n  &#123;&#123;- end &#125;&#125;\n  &#123;&#123;- if .Values.memoryHighWatermark.enabled &#125;&#125;\n  ## Memory Threshold\n  ##\n  total_memory_available_override_value &#x3D; &#123;&#123; include &quot;rabbitmq.toBytes&quot; .Values.resources.limits.memory &#125;&#125;\n  vm_memory_high_watermark.&#123;&#123; .Values.memoryHighWatermark.type &#125;&#125; &#x3D; &#123;&#123; .Values.memoryHighWatermark.value &#125;&#125;\n  &#123;&#123;- end &#125;&#125;</code></pre>\n\n<h3 id=\"TSL-Proxy-Termination-Nginx\"><a href=\"#TSL-Proxy-Termination-Nginx\" class=\"headerlink\" title=\"TSL Proxy Termination  - Nginx\"></a>TSL Proxy Termination  - Nginx</h3><p>swarm config </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">version: &#39;3.2&#39;\nservices:\n  nginx:\n    image: nginx:latest\n    ports:\n      - &quot;80:80&quot;\n      - &quot;25671:25671&quot;\n    volumes:\n      - .&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf\n      - .&#x2F;server_certificate.crt:&#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.crt\n      - .&#x2F;key.key:&#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.key\n    deploy:\n      placement:\n        constraints: [node.role &#x3D;&#x3D; manager]\n      restart_policy:\n        condition: on-failure</code></pre>\n\n<p>Renaming server_certificate.pem server_key.pem to server_certificate.crt  server_key.key.</p>\n<p>Remove keypassphrase from server_key.key to key.key:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">openssl rsa -in server_key.key -out key.key\n</code></pre>\n<p>add following to nginx.conf</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">...\nstream &#123;\n    server &#123;\n        listen     25671 ssl;\n        proxy_pass 10.192.27.111:5672;\n        ssl_certificate        &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.crt;\n        ssl_certificate_key    &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;server.key;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"Java-Client\"><a href=\"#Java-Client\" class=\"headerlink\" title=\"Java Client\"></a>Java Client</h3><h4 id=\"Direction-Connection\"><a href=\"#Direction-Connection\" class=\"headerlink\" title=\"Direction Connection\"></a>Direction Connection</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class RabbitClientTLS &#123;\n\n    public static void main(String[] args) throws Exception &#123;\n        char[] keyPassphrase &#x3D; &quot;stardust&quot;.toCharArray();\n        KeyStore ks &#x3D; KeyStore.getInstance(&quot;PKCS12&quot;);\n        ks.load(new FileInputStream(&quot;D:\\\\2021\\\\Dec\\\\certs\\\\result\\\\client_key.p12&quot;), keyPassphrase);\n\n        KeyManagerFactory kmf &#x3D; KeyManagerFactory.getInstance(&quot;SunX509&quot;);\n        kmf.init(ks, keyPassphrase);\n\n\n        char[] trustPassphrase &#x3D; &quot;stardust&quot;.toCharArray();\n        KeyStore tks &#x3D; KeyStore.getInstance(&quot;JKS&quot;);\n        tks.load(new FileInputStream(&quot;D:\\\\2021\\\\Dec\\\\certs\\\\result\\\\rabbitstore&quot;), trustPassphrase);\n\n        TrustManagerFactory tmf &#x3D; TrustManagerFactory.getInstance(&quot;SunX509&quot;);\n        tmf.init(tks);\n\n        SSLContext c &#x3D; SSLContext.getInstance(&quot;TLSv1.2&quot;);\n        c.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n        ConnectionFactory factory &#x3D; new ConnectionFactory();\n        factory.setUsername(&quot;rabbitmq&quot;);\n        factory.setPassword(&quot;rabbitpwd&quot;);\n\n        factory.setHost(&quot;10.192.27.111&quot;);\n        factory.setPort(25671);\n&#x2F;&#x2F;        factory.useSslProtocol();\n        factory.useSslProtocol(c);\n&#x2F;&#x2F;        factory.enableHostnameVerification();\n        Connection conn &#x3D; factory.newConnection();\n        Channel channel &#x3D; conn.createChannel();\n\n        channel.queueDeclare(&quot;rabbitmq-java-test&quot;, false, true, true, null);\n        channel.basicPublish(&quot;&quot;, &quot;rabbitmq-java-test&quot;, null, &quot;Hello, World&quot;.getBytes());\n\n        GetResponse chResponse &#x3D; channel.basicGet(&quot;rabbitmq-java-test&quot;, false);\n        if (chResponse &#x3D;&#x3D; null) &#123;\n            System.out.println(&quot;No message retrieved&quot;);\n        &#125; else &#123;\n            byte[] body &#x3D; chResponse.getBody();\n            System.out.println(&quot;Received: &quot; + new String(body));\n        &#125;\n        channel.close();\n        conn.close();\n    &#125;\n&#125;</code></pre>\n\n\n\n<h4 id=\"Using-spring-boot-starter-amqp\"><a href=\"#Using-spring-boot-starter-amqp\" class=\"headerlink\" title=\"Using spring-boot-starter-amqp\"></a>Using spring-boot-starter-amqp</h4><p>add following configurations :</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  application:\n    name: $&#123;APP_NAME:unnamed&#125;\n  # RabbitMQ??:\n  rabbitmq:\n    host: 10.192.27.111\n    port: 5671\n    username: rabbitmq\n    password: rabbitpwd\n#    publisher-confirms: true\n    ssl:\n      enabled: true\n      key-store: classpath:client_key.p12\n      key-store-password: stardust\n      trust-store: classpath:rabbitstore\n      trust-store-password: stardust\n      algorithm: TLSv1.2\n      key-store-type: PKCS12\n      trust-store-type: JKS\n      validate-server-certificate: true\n      verify-hostname: false</code></pre>\n\n<p>For mutual verification, on client side , it needs to provide PKCS12 format keystore and JSK format truststore and set validate-server-certificate to true.</p>\n<p>For singel side verification , set validate-server-certificate to false and provide trust-store only. </p>\n","feature":true,"text":"RabbitMQ TLSCertificationRabbitMQ TLS Support Generate certificates with TLS-GEN ubuntu@data-layer-bastion-2:~&#x2F;tck&#x2F;cert&#x2F;tls-g...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Configuration","slug":"Configuration","count":2,"path":"api/categories/Configuration.json"}],"tags":[{"name":"Config","slug":"Config","count":2,"path":"api/tags/Config.json"},{"name":"TSL","slug":"TSL","count":1,"path":"api/tags/TSL.json"},{"name":"Rabbitmq","slug":"Rabbitmq","count":1,"path":"api/tags/Rabbitmq.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RabbitMQ-TLS\"><span class=\"toc-text\">RabbitMQ TLS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Certification\"><span class=\"toc-text\">Certification</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Server\"><span class=\"toc-text\">Server</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Swarm\"><span class=\"toc-text\">Swarm</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Helm\"><span class=\"toc-text\">Helm</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TSL-Proxy-Termination-Nginx\"><span class=\"toc-text\">TSL Proxy Termination  - Nginx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-Client\"><span class=\"toc-text\">Java Client</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Direction-Connection\"><span class=\"toc-text\">Direction Connection</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Using-spring-boot-starter-amqp\"><span class=\"toc-text\">Using spring-boot-starter-amqp</span></a></li></ol></li></ol></li></ol>","author":{"name":"星尘","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1509114397022-ed747cca3f65?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=735&q=80","link":"/","description":"Trace on！","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2023-04-10T06:01:43.624Z","updated":"2023-04-10T06:01:43.624Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"https://images.unsplash.com/photo-1642716556212-df04701d3f97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1976&q=80","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[{"name":"Tutorial","slug":"Tutorial","count":1,"path":"api/categories/Tutorial.json"}],"tags":[{"name":"Sample","slug":"Sample","count":1,"path":"api/tags/Sample.json"}],"author":{"name":"星尘","slug":"blog-author","avatar":"https://images.unsplash.com/photo-1509114397022-ed747cca3f65?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=735&q=80","link":"/","description":"Trace on！","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}